"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.heatmapService = undefined;

var _spinalEnvViewerGraphService = require("spinal-env-viewer-graph-service");

var _heatMapModel = require("./heatMapModel");

var _heatMapModel2 = _interopRequireDefault(_heatMapModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const RELATION_NAME = "hasHeatMap";

let heatmapService = {
  createHeatMap(nodeId, heatMapName, heatMapMinName, heatMapMinValue, heatMapMinColor, heatMapMaxName, heatMapMaxValue, heatMapMaxColor, heatMapAverageName = null, heatMapAverageValue = null, heatMapAverageColor = null) {

    this.getHeatMap(nodeId, heatMapName).then(heatMapFound => {
      console.log("heatMapFound before condition", heatMapFound);

      if (typeof heatMapFound === "undefined") {
        console.log("heatMapFound inside if condition", heatMapFound);

        let heatMap = new _heatMapModel2.default(heatMapName, heatMapMinName, heatMapMinValue, heatMapMinColor, heatMapMaxName, heatMapMaxValue, heatMapMaxColor, heatMapAverageName, heatMapAverageValue, heatMapAverageColor);

        let heatMapNode = _spinalEnvViewerGraphService.SpinalGraphService.createNode({
          name: heatMapName
        }, heatMap);

        _spinalEnvViewerGraphService.SpinalGraphService.addChild(nodeId, heatMapNode, RELATION_NAME, _spinalEnvViewerGraphService.SPINAL_RELATION_TYPE);
      } else {
        heatMapFound.element.load().then(el => {
          this.updateHeatMap(el, heatMapMinValue, heatMapMinColor, heatMapMaxValue, heatMapMaxColor, heatMapAverageColor);
        });
      }
    });
  },
  getHeatMap(dashboardId, heatMapName) {
    return _spinalEnvViewerGraphService.SpinalGraphService.getChildren(dashboardId, [RELATION_NAME]).then(heatMaps => {
      if (heatMapName) {
        for (let index = 0; index < heatMaps.length; index++) {
          const heatMap = heatMaps[index];
          if (heatMap.name.get().toLowerCase() === heatMapName.toLowerCase()) return heatMap;
        }
      } else {
        return heatMaps;
      }

      return;
    });
  },
  updateHeatMap(heatMap, minValue, minColor, maxValue, maxColor, averageColor) {
    minValue && minValue !== heatMap.min.value.get() ? heatMap.min.value.set(minValue) : "";

    minColor && minColor !== heatMap.min.color.get() ? heatMap.min.color.set(minColor) : "";

    maxValue && maxValue !== heatMap.max.value.get() ? heatMap.max.value.set(maxValue) : "";

    maxColor && maxColor !== heatMap.max.color.get() ? heatMap.max.color.set(maxColor) : "";

    heatMap.average && maxValue && minValue ? heatMap.average.value.set((maxValue + minValue) / 2) : "";

    heatMap.average && averageColor ? heatMap.average.color.set(averageColor) : "";
  }
};

exports.heatmapService = heatmapService;
exports.default = heatmapService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJSRUxBVElPTl9OQU1FIiwiaGVhdG1hcFNlcnZpY2UiLCJjcmVhdGVIZWF0TWFwIiwibm9kZUlkIiwiaGVhdE1hcE5hbWUiLCJoZWF0TWFwTWluTmFtZSIsImhlYXRNYXBNaW5WYWx1ZSIsImhlYXRNYXBNaW5Db2xvciIsImhlYXRNYXBNYXhOYW1lIiwiaGVhdE1hcE1heFZhbHVlIiwiaGVhdE1hcE1heENvbG9yIiwiaGVhdE1hcEF2ZXJhZ2VOYW1lIiwiaGVhdE1hcEF2ZXJhZ2VWYWx1ZSIsImhlYXRNYXBBdmVyYWdlQ29sb3IiLCJnZXRIZWF0TWFwIiwidGhlbiIsImhlYXRNYXBGb3VuZCIsImNvbnNvbGUiLCJsb2ciLCJoZWF0TWFwIiwiSGVhdE1hcCIsImhlYXRNYXBOb2RlIiwiU3BpbmFsR3JhcGhTZXJ2aWNlIiwiY3JlYXRlTm9kZSIsIm5hbWUiLCJhZGRDaGlsZCIsIlNQSU5BTF9SRUxBVElPTl9UWVBFIiwiZWxlbWVudCIsImxvYWQiLCJlbCIsInVwZGF0ZUhlYXRNYXAiLCJkYXNoYm9hcmRJZCIsImdldENoaWxkcmVuIiwiaGVhdE1hcHMiLCJpbmRleCIsImxlbmd0aCIsImdldCIsInRvTG93ZXJDYXNlIiwibWluVmFsdWUiLCJtaW5Db2xvciIsIm1heFZhbHVlIiwibWF4Q29sb3IiLCJhdmVyYWdlQ29sb3IiLCJtaW4iLCJ2YWx1ZSIsInNldCIsImNvbG9yIiwibWF4IiwiYXZlcmFnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUlBOzs7Ozs7QUFFQSxNQUFNQSxnQkFBZ0IsWUFBdEI7O0FBRUEsSUFBSUMsaUJBQWlCO0FBQ25CQyxnQkFBY0MsTUFBZCxFQUFzQkMsV0FBdEIsRUFBbUNDLGNBQW5DLEVBQW1EQyxlQUFuRCxFQUNFQyxlQURGLEVBQ21CQyxjQURuQixFQUNtQ0MsZUFEbkMsRUFDb0RDLGVBRHBELEVBRUVDLHFCQUFxQixJQUZ2QixFQUU2QkMsc0JBQXNCLElBRm5ELEVBR0VDLHNCQUFzQixJQUh4QixFQUc4Qjs7QUFFNUIsU0FBS0MsVUFBTCxDQUFnQlgsTUFBaEIsRUFBd0JDLFdBQXhCLEVBQXFDVyxJQUFyQyxDQUEwQ0MsZ0JBQWdCO0FBQ3hEQyxjQUFRQyxHQUFSLENBQVksK0JBQVosRUFBNkNGLFlBQTdDOztBQUVBLFVBQUksT0FBT0EsWUFBUCxLQUF3QixXQUE1QixFQUF5QztBQUN2Q0MsZ0JBQVFDLEdBQVIsQ0FBWSxrQ0FBWixFQUFnREYsWUFBaEQ7O0FBRUEsWUFBSUcsVUFBVSxJQUFJQyxzQkFBSixDQUFZaEIsV0FBWixFQUF5QkMsY0FBekIsRUFDWkMsZUFEWSxFQUVaQyxlQUZZLEVBRUtDLGNBRkwsRUFFcUJDLGVBRnJCLEVBR1pDLGVBSFksRUFJWkMsa0JBSlksRUFJUUMsbUJBSlIsRUFJNkJDLG1CQUo3QixDQUFkOztBQU1BLFlBQUlRLGNBQWNDLGdEQUFtQkMsVUFBbkIsQ0FBOEI7QUFDOUNDLGdCQUFNcEI7QUFEd0MsU0FBOUIsRUFFZmUsT0FGZSxDQUFsQjs7QUFJQUcsd0RBQW1CRyxRQUFuQixDQUNFdEIsTUFERixFQUVFa0IsV0FGRixFQUdFckIsYUFIRixFQUlFMEIsaURBSkY7QUFNRCxPQW5CRCxNQW1CTztBQUNMVixxQkFBYVcsT0FBYixDQUFxQkMsSUFBckIsR0FBNEJiLElBQTVCLENBQWlDYyxNQUFNO0FBQ3JDLGVBQUtDLGFBQUwsQ0FBbUJELEVBQW5CLEVBQXVCdkIsZUFBdkIsRUFDRUMsZUFERixFQUVFRSxlQUZGLEVBRW1CQyxlQUZuQixFQUVvQ0csbUJBRnBDO0FBR0QsU0FKRDtBQU1EO0FBQ0YsS0E5QkQ7QUFrQ0QsR0F4Q2tCO0FBeUNuQkMsYUFBV2lCLFdBQVgsRUFBd0IzQixXQUF4QixFQUFxQztBQUNuQyxXQUFPa0IsZ0RBQW1CVSxXQUFuQixDQUErQkQsV0FBL0IsRUFBNEMsQ0FBQy9CLGFBQUQsQ0FBNUMsRUFBNkRlLElBQTdELENBQ0xrQixZQUFZO0FBQ1YsVUFBSTdCLFdBQUosRUFBaUI7QUFDZixhQUFLLElBQUk4QixRQUFRLENBQWpCLEVBQW9CQSxRQUFRRCxTQUFTRSxNQUFyQyxFQUE2Q0QsT0FBN0MsRUFBc0Q7QUFDcEQsZ0JBQU1mLFVBQVVjLFNBQVNDLEtBQVQsQ0FBaEI7QUFDQSxjQUFJZixRQUFRSyxJQUFSLENBQWFZLEdBQWIsR0FBbUJDLFdBQW5CLE9BQXFDakMsWUFBWWlDLFdBQVosRUFBekMsRUFDRSxPQUFPbEIsT0FBUDtBQUNIO0FBQ0YsT0FORCxNQU1PO0FBQ0wsZUFBT2MsUUFBUDtBQUNEOztBQUVEO0FBQ0QsS0FiSSxDQUFQO0FBZUQsR0F6RGtCO0FBMERuQkgsZ0JBQWNYLE9BQWQsRUFBdUJtQixRQUF2QixFQUFpQ0MsUUFBakMsRUFBMkNDLFFBQTNDLEVBQXFEQyxRQUFyRCxFQUErREMsWUFBL0QsRUFBNkU7QUFDM0VKLGdCQUFZQSxhQUFhbkIsUUFBUXdCLEdBQVIsQ0FBWUMsS0FBWixDQUFrQlIsR0FBbEIsRUFBekIsR0FDRWpCLFFBQVF3QixHQUFSLENBQVlDLEtBQVosQ0FBa0JDLEdBQWxCLENBQXNCUCxRQUF0QixDQURGLEdBRUUsRUFGRjs7QUFJQUMsZ0JBQVlBLGFBQWFwQixRQUFRd0IsR0FBUixDQUFZRyxLQUFaLENBQWtCVixHQUFsQixFQUF6QixHQUNFakIsUUFBUXdCLEdBQVIsQ0FBWUcsS0FBWixDQUFrQkQsR0FBbEIsQ0FBc0JOLFFBQXRCLENBREYsR0FFRSxFQUZGOztBQUlBQyxnQkFBWUEsYUFBYXJCLFFBQVE0QixHQUFSLENBQVlILEtBQVosQ0FBa0JSLEdBQWxCLEVBQXpCLEdBQ0VqQixRQUFRNEIsR0FBUixDQUFZSCxLQUFaLENBQWtCQyxHQUFsQixDQUFzQkwsUUFBdEIsQ0FERixHQUVFLEVBRkY7O0FBSUFDLGdCQUFZQSxhQUFhdEIsUUFBUTRCLEdBQVIsQ0FBWUQsS0FBWixDQUFrQlYsR0FBbEIsRUFBekIsR0FDRWpCLFFBQVE0QixHQUFSLENBQVlELEtBQVosQ0FBa0JELEdBQWxCLENBQXNCSixRQUF0QixDQURGLEdBRUUsRUFGRjs7QUFJQXRCLFlBQVE2QixPQUFSLElBQW1CUixRQUFuQixJQUErQkYsUUFBL0IsR0FDRW5CLFFBQVE2QixPQUFSLENBQWdCSixLQUFoQixDQUFzQkMsR0FBdEIsQ0FBMEIsQ0FBQ0wsV0FBV0YsUUFBWixJQUF3QixDQUFsRCxDQURGLEdBRUUsRUFGRjs7QUFJQW5CLFlBQVE2QixPQUFSLElBQW1CTixZQUFuQixHQUNFdkIsUUFBUTZCLE9BQVIsQ0FBZ0JGLEtBQWhCLENBQXNCRCxHQUF0QixDQUEwQkgsWUFBMUIsQ0FERixHQUVFLEVBRkY7QUFHRDtBQWxGa0IsQ0FBckI7O1FBc0ZFekMsYyxHQUFBQSxjO2tCQUdhQSxjIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgU1BJTkFMX1JFTEFUSU9OX1RZUEUsXG4gIFNwaW5hbEdyYXBoU2VydmljZVxufSBmcm9tIFwic3BpbmFsLWVudi12aWV3ZXItZ3JhcGgtc2VydmljZVwiO1xuaW1wb3J0IEhlYXRNYXAgZnJvbSBcIi4vaGVhdE1hcE1vZGVsXCI7XG5cbmNvbnN0IFJFTEFUSU9OX05BTUUgPSBcImhhc0hlYXRNYXBcIjtcblxubGV0IGhlYXRtYXBTZXJ2aWNlID0ge1xuICBjcmVhdGVIZWF0TWFwKG5vZGVJZCwgaGVhdE1hcE5hbWUsIGhlYXRNYXBNaW5OYW1lLCBoZWF0TWFwTWluVmFsdWUsXG4gICAgaGVhdE1hcE1pbkNvbG9yLCBoZWF0TWFwTWF4TmFtZSwgaGVhdE1hcE1heFZhbHVlLCBoZWF0TWFwTWF4Q29sb3IsXG4gICAgaGVhdE1hcEF2ZXJhZ2VOYW1lID0gbnVsbCwgaGVhdE1hcEF2ZXJhZ2VWYWx1ZSA9IG51bGwsXG4gICAgaGVhdE1hcEF2ZXJhZ2VDb2xvciA9IG51bGwpIHtcblxuICAgIHRoaXMuZ2V0SGVhdE1hcChub2RlSWQsIGhlYXRNYXBOYW1lKS50aGVuKGhlYXRNYXBGb3VuZCA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcImhlYXRNYXBGb3VuZCBiZWZvcmUgY29uZGl0aW9uXCIsIGhlYXRNYXBGb3VuZCk7XG5cbiAgICAgIGlmICh0eXBlb2YgaGVhdE1hcEZvdW5kID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiaGVhdE1hcEZvdW5kIGluc2lkZSBpZiBjb25kaXRpb25cIiwgaGVhdE1hcEZvdW5kKTtcblxuICAgICAgICBsZXQgaGVhdE1hcCA9IG5ldyBIZWF0TWFwKGhlYXRNYXBOYW1lLCBoZWF0TWFwTWluTmFtZSxcbiAgICAgICAgICBoZWF0TWFwTWluVmFsdWUsXG4gICAgICAgICAgaGVhdE1hcE1pbkNvbG9yLCBoZWF0TWFwTWF4TmFtZSwgaGVhdE1hcE1heFZhbHVlLFxuICAgICAgICAgIGhlYXRNYXBNYXhDb2xvcixcbiAgICAgICAgICBoZWF0TWFwQXZlcmFnZU5hbWUsIGhlYXRNYXBBdmVyYWdlVmFsdWUsIGhlYXRNYXBBdmVyYWdlQ29sb3IpO1xuXG4gICAgICAgIGxldCBoZWF0TWFwTm9kZSA9IFNwaW5hbEdyYXBoU2VydmljZS5jcmVhdGVOb2RlKHtcbiAgICAgICAgICBuYW1lOiBoZWF0TWFwTmFtZVxuICAgICAgICB9LCBoZWF0TWFwKTtcblxuICAgICAgICBTcGluYWxHcmFwaFNlcnZpY2UuYWRkQ2hpbGQoXG4gICAgICAgICAgbm9kZUlkLFxuICAgICAgICAgIGhlYXRNYXBOb2RlLFxuICAgICAgICAgIFJFTEFUSU9OX05BTUUsXG4gICAgICAgICAgU1BJTkFMX1JFTEFUSU9OX1RZUEVcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhlYXRNYXBGb3VuZC5lbGVtZW50LmxvYWQoKS50aGVuKGVsID0+IHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUhlYXRNYXAoZWwsIGhlYXRNYXBNaW5WYWx1ZSxcbiAgICAgICAgICAgIGhlYXRNYXBNaW5Db2xvcixcbiAgICAgICAgICAgIGhlYXRNYXBNYXhWYWx1ZSwgaGVhdE1hcE1heENvbG9yLCBoZWF0TWFwQXZlcmFnZUNvbG9yKTtcbiAgICAgICAgfSlcblxuICAgICAgfVxuICAgIH0pXG5cblxuXG4gIH0sXG4gIGdldEhlYXRNYXAoZGFzaGJvYXJkSWQsIGhlYXRNYXBOYW1lKSB7XG4gICAgcmV0dXJuIFNwaW5hbEdyYXBoU2VydmljZS5nZXRDaGlsZHJlbihkYXNoYm9hcmRJZCwgW1JFTEFUSU9OX05BTUVdKS50aGVuKFxuICAgICAgaGVhdE1hcHMgPT4ge1xuICAgICAgICBpZiAoaGVhdE1hcE5hbWUpIHtcbiAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgaGVhdE1hcHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCBoZWF0TWFwID0gaGVhdE1hcHNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKGhlYXRNYXAubmFtZS5nZXQoKS50b0xvd2VyQ2FzZSgpID09PSBoZWF0TWFwTmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAgICAgICByZXR1cm4gaGVhdE1hcDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGhlYXRNYXBzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICk7XG4gIH0sXG4gIHVwZGF0ZUhlYXRNYXAoaGVhdE1hcCwgbWluVmFsdWUsIG1pbkNvbG9yLCBtYXhWYWx1ZSwgbWF4Q29sb3IsIGF2ZXJhZ2VDb2xvcikge1xuICAgIG1pblZhbHVlICYmIG1pblZhbHVlICE9PSBoZWF0TWFwLm1pbi52YWx1ZS5nZXQoKSA/XG4gICAgICBoZWF0TWFwLm1pbi52YWx1ZS5zZXQobWluVmFsdWUpIDpcbiAgICAgIFwiXCI7XG5cbiAgICBtaW5Db2xvciAmJiBtaW5Db2xvciAhPT0gaGVhdE1hcC5taW4uY29sb3IuZ2V0KCkgP1xuICAgICAgaGVhdE1hcC5taW4uY29sb3Iuc2V0KG1pbkNvbG9yKSA6XG4gICAgICBcIlwiO1xuXG4gICAgbWF4VmFsdWUgJiYgbWF4VmFsdWUgIT09IGhlYXRNYXAubWF4LnZhbHVlLmdldCgpID9cbiAgICAgIGhlYXRNYXAubWF4LnZhbHVlLnNldChtYXhWYWx1ZSkgOlxuICAgICAgXCJcIjtcblxuICAgIG1heENvbG9yICYmIG1heENvbG9yICE9PSBoZWF0TWFwLm1heC5jb2xvci5nZXQoKSA/XG4gICAgICBoZWF0TWFwLm1heC5jb2xvci5zZXQobWF4Q29sb3IpIDpcbiAgICAgIFwiXCI7XG5cbiAgICBoZWF0TWFwLmF2ZXJhZ2UgJiYgbWF4VmFsdWUgJiYgbWluVmFsdWUgP1xuICAgICAgaGVhdE1hcC5hdmVyYWdlLnZhbHVlLnNldCgobWF4VmFsdWUgKyBtaW5WYWx1ZSkgLyAyKSA6XG4gICAgICBcIlwiO1xuXG4gICAgaGVhdE1hcC5hdmVyYWdlICYmIGF2ZXJhZ2VDb2xvciA/XG4gICAgICBoZWF0TWFwLmF2ZXJhZ2UuY29sb3Iuc2V0KGF2ZXJhZ2VDb2xvcikgOlxuICAgICAgXCJcIjtcbiAgfVxufTtcblxuZXhwb3J0IHtcbiAgaGVhdG1hcFNlcnZpY2Vcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhlYXRtYXBTZXJ2aWNlOyJdfQ==