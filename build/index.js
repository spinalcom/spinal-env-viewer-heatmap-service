"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.heatmapService = undefined;

var _spinalEnvViewerGraphService = require("spinal-env-viewer-graph-service");

var _heatMapModel = require("./heatMapModel");

var _heatMapModel2 = _interopRequireDefault(_heatMapModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const RELATION_NAME = "hasHeatMap";

let heatmapService = {
  createHeatMap(nodeId, heatMapName, heatMapMinName, heatMapMinValue, heatMapMinColor, heatMapMaxName, heatMapMaxValue, heatMapMaxColor, heatMapAverageName = null, heatMapAverageValue = null, heatMapAverageColor = null) {
    this.getHeatMap(nodeId, heatMapName).then(heatMapFound => {
      if (typeof heatMapFound === "undefined") {
        let heatMap = new _heatMapModel2.default(heatMapName, heatMapMinName, heatMapMinValue, heatMapMinColor, heatMapMaxName, heatMapMaxValue, heatMapMaxColor, heatMapAverageName, heatMapAverageValue, heatMapAverageColor);

        let heatMapNode = _spinalEnvViewerGraphService.SpinalGraphService.createNode({
          name: heatMapName
        }, heatMap);

        _spinalEnvViewerGraphService.SpinalGraphService.addChild(nodeId, heatMapNode, RELATION_NAME, _spinalEnvViewerGraphService.SPINAL_RELATION_LST_PTR_TYPE);
      } else {
        heatMapFound.element.load().then(el => {
          this.updateHeatMap(el, heatMapMinValue, heatMapMinColor, heatMapMaxValue, heatMapMaxColor, heatMapAverageColor);
        });
      }
    });
  },
  getHeatMap(dashboardId, heatMapName) {
    return _spinalEnvViewerGraphService.SpinalGraphService.getChildren(dashboardId, [RELATION_NAME]).then(heatMaps => {
      if (heatMapName) {
        for (let index = 0; index < heatMaps.length; index++) {
          const heatMap = heatMaps[index];
          if (heatMap.name.get().toLowerCase() === heatMapName.toLowerCase()) return heatMap;
        }
      } else {
        return heatMaps;
      }

      return;
    });
  },
  updateHeatMap(heatMap, minValue, minColor, maxValue, maxColor, averageColor) {
    minValue && minValue !== heatMap.min.value.get() ? heatMap.min.value.set(minValue) : "";

    minColor && minColor !== heatMap.min.color.get() ? heatMap.min.color.set(minColor) : "";

    maxValue && maxValue !== heatMap.max.value.get() ? heatMap.max.value.set(maxValue) : "";

    maxColor && maxColor !== heatMap.max.color.get() ? heatMap.max.color.set(maxColor) : "";

    heatMap.average && maxValue && minValue ? heatMap.average.value.set((Number(maxValue) + Number(minValue)) / 2) : "";

    heatMap.average && averageColor ? heatMap.average.color.set(averageColor) : "";
  }
};

exports.heatmapService = heatmapService;
exports.default = heatmapService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJSRUxBVElPTl9OQU1FIiwiaGVhdG1hcFNlcnZpY2UiLCJjcmVhdGVIZWF0TWFwIiwibm9kZUlkIiwiaGVhdE1hcE5hbWUiLCJoZWF0TWFwTWluTmFtZSIsImhlYXRNYXBNaW5WYWx1ZSIsImhlYXRNYXBNaW5Db2xvciIsImhlYXRNYXBNYXhOYW1lIiwiaGVhdE1hcE1heFZhbHVlIiwiaGVhdE1hcE1heENvbG9yIiwiaGVhdE1hcEF2ZXJhZ2VOYW1lIiwiaGVhdE1hcEF2ZXJhZ2VWYWx1ZSIsImhlYXRNYXBBdmVyYWdlQ29sb3IiLCJnZXRIZWF0TWFwIiwidGhlbiIsImhlYXRNYXBGb3VuZCIsImhlYXRNYXAiLCJIZWF0TWFwIiwiaGVhdE1hcE5vZGUiLCJTcGluYWxHcmFwaFNlcnZpY2UiLCJjcmVhdGVOb2RlIiwibmFtZSIsImFkZENoaWxkIiwiU1BJTkFMX1JFTEFUSU9OX0xTVF9QVFJfVFlQRSIsImVsZW1lbnQiLCJsb2FkIiwiZWwiLCJ1cGRhdGVIZWF0TWFwIiwiZGFzaGJvYXJkSWQiLCJnZXRDaGlsZHJlbiIsImhlYXRNYXBzIiwiaW5kZXgiLCJsZW5ndGgiLCJnZXQiLCJ0b0xvd2VyQ2FzZSIsIm1pblZhbHVlIiwibWluQ29sb3IiLCJtYXhWYWx1ZSIsIm1heENvbG9yIiwiYXZlcmFnZUNvbG9yIiwibWluIiwidmFsdWUiLCJzZXQiLCJjb2xvciIsIm1heCIsImF2ZXJhZ2UiLCJOdW1iZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFJQTs7Ozs7O0FBRUEsTUFBTUEsZ0JBQWdCLFlBQXRCOztBQUVBLElBQUlDLGlCQUFpQjtBQUNuQkMsZ0JBQ0VDLE1BREYsRUFFRUMsV0FGRixFQUdFQyxjQUhGLEVBSUVDLGVBSkYsRUFLRUMsZUFMRixFQU1FQyxjQU5GLEVBT0VDLGVBUEYsRUFRRUMsZUFSRixFQVNFQyxxQkFBcUIsSUFUdkIsRUFVRUMsc0JBQXNCLElBVnhCLEVBV0VDLHNCQUFzQixJ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QUFwQixJQUF3QyxDQUFsRSxDQURGLEdBRUUsRUFGRjs7QUFJQW5CLFlBQVE2QixPQUFSLElBQW1CTixZQUFuQixHQUNFdkIsUUFBUTZCLE9BQVIsQ0FBZ0JGLEtBQWhCLENBQXNCRCxHQUF0QixDQUEwQkgsWUFBMUIsQ0FERixHQUVFLEVBRkY7QUFHRDtBQWhHa0IsQ0FBckI7O1FBb0dFdkMsYyxHQUFBQSxjO2tCQUdhQSxjIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgU1BJTkFMX1JFTEFUSU9OX0xTVF9QVFJfVFlQRSxcbiAgU3BpbmFsR3JhcGhTZXJ2aWNlXG59IGZyb20gXCJzcGluYWwtZW52LXZpZXdlci1ncmFwaC1zZXJ2aWNlXCI7XG5pbXBvcnQgSGVhdE1hcCBmcm9tIFwiLi9oZWF0TWFwTW9kZWxcIjtcblxuY29uc3QgUkVMQVRJT05fTkFNRSA9IFwiaGFzSGVhdE1hcFwiO1xuXG5sZXQgaGVhdG1hcFNlcnZpY2UgPSB7XG4gIGNyZWF0ZUhlYXRNYXAoXG4gICAgbm9kZUlkLFxuICAgIGhlYXRNYXBOYW1lLFxuICAgIGhlYXRNYXBNaW5OYW1lLFxuICAgIGhlYXRNYXBNaW5WYWx1ZSxcbiAgICBoZWF0TWFwTWluQ29sb3IsXG4gICAgaGVhdE1hcE1heE5hbWUsXG4gICAgaGVhdE1hcE1heFZhbHVlLFxuICAgIGhlYXRNYXBNYXhDb2xvcixcbiAgICBoZWF0TWFwQXZlcmFnZU5hbWUgPSBudWxsLFxuICAgIGhlYXRNYXBBdmVyYWdlVmFsdWUgPSBudWxsLFxuICAgIGhlYXRNYXBBdmVyYWdlQ29sb3IgPSBudWxsXG4gICkge1xuICAgIHRoaXMuZ2V0SGVhdE1hcChub2RlSWQsIGhlYXRNYXBOYW1lKS50aGVuKGhlYXRNYXBGb3VuZCA9PiB7XG4gICAgICBpZiAodHlwZW9mIGhlYXRNYXBGb3VuZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBsZXQgaGVhdE1hcCA9IG5ldyBIZWF0TWFwKFxuICAgICAgICAgIGhlYXRNYXBOYW1lLFxuICAgICAgICAgIGhlYXRNYXBNaW5OYW1lLFxuICAgICAgICAgIGhlYXRNYXBNaW5WYWx1ZSxcbiAgICAgICAgICBoZWF0TWFwTWluQ29sb3IsXG4gICAgICAgICAgaGVhdE1hcE1heE5hbWUsXG4gICAgICAgICAgaGVhdE1hcE1heFZhbHVlLFxuICAgICAgICAgIGhlYXRNYXBNYXhDb2xvcixcbiAgICAgICAgICBoZWF0TWFwQXZlcmFnZU5hbWUsXG4gICAgICAgICAgaGVhdE1hcEF2ZXJhZ2VWYWx1ZSxcbiAgICAgICAgICBoZWF0TWFwQXZlcmFnZUNvbG9yXG4gICAgICAgICk7XG5cbiAgICAgICAgbGV0IGhlYXRNYXBOb2RlID0gU3BpbmFsR3JhcGhTZXJ2aWNlLmNyZWF0ZU5vZGUoe1xuICAgICAgICAgICAgbmFtZTogaGVhdE1hcE5hbWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhlYXRNYXBcbiAgICAgICAgKTtcblxuICAgICAgICBTcGluYWxHcmFwaFNlcnZpY2UuYWRkQ2hpbGQoXG4gICAgICAgICAgbm9kZUlkLFxuICAgICAgICAgIGhlYXRNYXBOb2RlLFxuICAgICAgICAgIFJFTEFUSU9OX05BTUUsXG4gICAgICAgICAgU1BJTkFMX1JFTEFUSU9OX0xTVF9QVFJfVFlQRVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGVhdE1hcEZvdW5kLmVsZW1lbnQubG9hZCgpLnRoZW4oZWwgPT4ge1xuICAgICAgICAgIHRoaXMudXBkYXRlSGVhdE1hcChcbiAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgaGVhdE1hcE1pblZhbHVlLFxuICAgICAgICAgICAgaGVhdE1hcE1pbkNvbG9yLFxuICAgICAgICAgICAgaGVhdE1hcE1heFZhbHVlLFxuICAgICAgICAgICAgaGVhdE1hcE1heENvbG9yLFxuICAgICAgICAgICAgaGVhdE1hcEF2ZXJhZ2VDb2xvclxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBnZXRIZWF0TWFwKGRhc2hib2FyZElkLCBoZWF0TWFwTmFtZSkge1xuICAgIHJldHVybiBTcGluYWxHcmFwaFNlcnZpY2UuZ2V0Q2hpbGRyZW4oZGFzaGJvYXJkSWQsIFtSRUxBVElPTl9OQU1FXSkudGhlbihcbiAgICAgIGhlYXRNYXBzID0+IHtcbiAgICAgICAgaWYgKGhlYXRNYXBOYW1lKSB7XG4gICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGhlYXRNYXBzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgY29uc3QgaGVhdE1hcCA9IGhlYXRNYXBzW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChoZWF0TWFwLm5hbWUuZ2V0KCkudG9Mb3dlckNhc2UoKSA9PT0gaGVhdE1hcE5hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICAgICAgcmV0dXJuIGhlYXRNYXA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBoZWF0TWFwcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICApO1xuICB9LFxuICB1cGRhdGVIZWF0TWFwKGhlYXRNYXAsIG1pblZhbHVlLCBtaW5Db2xvciwgbWF4VmFsdWUsIG1heENvbG9yLCBhdmVyYWdlQ29sb3IpIHtcbiAgICBtaW5WYWx1ZSAmJiBtaW5WYWx1ZSAhPT0gaGVhdE1hcC5taW4udmFsdWUuZ2V0KCkgP1xuICAgICAgaGVhdE1hcC5taW4udmFsdWUuc2V0KG1pblZhbHVlKSA6XG4gICAgICBcIlwiO1xuXG4gICAgbWluQ29sb3IgJiYgbWluQ29sb3IgIT09IGhlYXRNYXAubWluLmNvbG9yLmdldCgpID9cbiAgICAgIGhlYXRNYXAubWluLmNvbG9yLnNldChtaW5Db2xvcikgOlxuICAgICAgXCJcIjtcblxuICAgIG1heFZhbHVlICYmIG1heFZhbHVlICE9PSBoZWF0TWFwLm1heC52YWx1ZS5nZXQoKSA/XG4gICAgICBoZWF0TWFwLm1heC52YWx1ZS5zZXQobWF4VmFsdWUpIDpcbiAgICAgIFwiXCI7XG5cbiAgICBtYXhDb2xvciAmJiBtYXhDb2xvciAhPT0gaGVhdE1hcC5tYXguY29sb3IuZ2V0KCkgP1xuICAgICAgaGVhdE1hcC5tYXguY29sb3Iuc2V0KG1heENvbG9yKSA6XG4gICAgICBcIlwiO1xuXG4gICAgaGVhdE1hcC5hdmVyYWdlICYmIG1heFZhbHVlICYmIG1pblZhbHVlID9cbiAgICAgIGhlYXRNYXAuYXZlcmFnZS52YWx1ZS5zZXQoKE51bWJlcihtYXhWYWx1ZSkgKyBOdW1iZXIobWluVmFsdWUpKSAvIDIpIDpcbiAgICAgIFwiXCI7XG5cbiAgICBoZWF0TWFwLmF2ZXJhZ2UgJiYgYXZlcmFnZUNvbG9yID9cbiAgICAgIGhlYXRNYXAuYXZlcmFnZS5jb2xvci5zZXQoYXZlcmFnZUNvbG9yKSA6XG4gICAgICBcIlwiO1xuICB9XG59O1xuXG5leHBvcnQge1xuICBoZWF0bWFwU2VydmljZVxufTtcblxuZXhwb3J0IGRlZmF1bHQgaGVhdG1hcFNlcnZpY2U7Il19