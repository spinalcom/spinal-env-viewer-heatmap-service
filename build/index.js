"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.heatmapService = undefined;

var _spinalEnvViewerGraphService = require("spinal-env-viewer-graph-service");

var _heatMapModel = require("./heatMapModel");

var _heatMapModel2 = _interopRequireDefault(_heatMapModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const RELATION_NAME = "hasHeatMap";

let heatmapService = {
  createHeatMap(nodeId, heatMapName, heatMapMinName, heatMapMinValue, heatMapMinColor, heatMapMaxName, heatMapMaxValue, heatMapMaxColor, heatMapAverageName = null, heatMapAverageValue = null, heatMapAverageColor = null) {

    this.getHeatMap(nodeId, heatMapName).then(heatMapFound => {
      console.log("heatMapFound before condition", heatMapFound);

      if (typeof heatMapFound === "undefined") {
        console.log("heatMapFound inside if condition", heatMapFound);

        let heatMap = new _heatMapModel2.default(heatMapName, heatMapMinName, heatMapMinValue, heatMapMinColor, heatMapMaxName, heatMapMaxValue, heatMapMaxColor, heatMapAverageName, heatMapAverageValue, heatMapAverageColor);

        let heatMapNode = _spinalEnvViewerGraphService.SpinalGraphService.createNode({
          name: heatMapName
        }, heatMap);

        _spinalEnvViewerGraphService.SpinalGraphService.addChild(nodeId, heatMapNode, RELATION_NAME, _spinalEnvViewerGraphService.SPINAL_RELATION_LST_PTR_TYPE);
      } else {
        heatMapFound.element.load().then(el => {
          this.updateHeatMap(el, heatMapMinValue, heatMapMinColor, heatMapMaxValue, heatMapMaxColor, heatMapAverageColor);
        });
      }
    });
  },
  getHeatMap(dashboardId, heatMapName) {
    return _spinalEnvViewerGraphService.SpinalGraphService.getChildren(dashboardId, [RELATION_NAME]).then(heatMaps => {
      if (heatMapName) {
        for (let index = 0; index < heatMaps.length; index++) {
          const heatMap = heatMaps[index];
          if (heatMap.name.get().toLowerCase() === heatMapName.toLowerCase()) return heatMap;
        }
      } else {
        return heatMaps;
      }

      return;
    });
  },
  updateHeatMap(heatMap, minValue, minColor, maxValue, maxColor, averageColor) {
    minValue && minValue !== heatMap.min.value.get() ? heatMap.min.value.set(minValue) : "";

    minColor && minColor !== heatMap.min.color.get() ? heatMap.min.color.set(minColor) : "";

    maxValue && maxValue !== heatMap.max.value.get() ? heatMap.max.value.set(maxValue) : "";

    maxColor && maxColor !== heatMap.max.color.get() ? heatMap.max.color.set(maxColor) : "";

    heatMap.average && maxValue && minValue ? heatMap.average.value.set((maxValue + minValue) / 2) : "";

    heatMap.average && averageColor ? heatMap.average.color.set(averageColor) : "";
  }
};

exports.heatmapService = heatmapService;
exports.default = heatmapService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJSRUxBVElPTl9OQU1FIiwiaGVhdG1hcFNlcnZpY2UiLCJjcmVhdGVIZWF0TWFwIiwibm9kZUlkIiwiaGVhdE1hcE5hbWUiLCJoZWF0TWFwTWluTmFtZSIsImhlYXRNYXBNaW5WYWx1ZSIsImhlYXRNYXBNaW5Db2xvciIsImhlYXRNYXBNYXhOYW1lIiwiaGVhdE1hcE1heFZhbHVlIiwiaGVhdE1hcE1heENvbG9yIiwiaGVhdE1hcEF2ZXJhZ2VOYW1lIiwiaGVhdE1hcEF2ZXJhZ2VWYWx1ZSIsImhlYXRNYXBBdmVyYWdlQ29sb3IiLCJnZXRIZWF0TWFwIiwidGhlbiIsImhlYXRNYXBGb3VuZCIsImNvbnNvbGUiLCJsb2ciLCJoZWF0TWFwIiwiSGVhdE1hcCIsImhlYXRNYXBOb2RlIiwiU3BpbmFsR3JhcGhTZXJ2aWNlIiwiY3JlYXRlTm9kZSIsIm5hbWUiLCJhZGRDaGlsZCIsIlNQSU5BTF9SRUxBVElPTl9MU1RfUFRSX1RZUEUiLCJlbGVtZW50IiwibG9hZCIsImVsIiwidXBkYXRlSGVhdE1hcCIsImRhc2hib2FyZElkIiwiZ2V0Q2hpbGRyZW4iLCJoZWF0TWFwcyIsImluZGV4IiwibGVuZ3RoIiwiZ2V0IiwidG9Mb3dlckNhc2UiLCJtaW5WYWx1ZSIsIm1pbkNvbG9yIiwibWF4VmFsdWUiLCJtYXhDb2xvciIsImF2ZXJhZ2VDb2xvciIsIm1pbiIsInZhbHVlIiwic2V0IiwiY29sb3IiLCJtYXgiLCJhdmVyYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBSUE7Ozs7OztBQUVBLE1BQU1BLGdCQUFnQixZQUF0Qjs7QUFFQSxJQUFJQyxpQkFBaUI7QUFDbkJDLGdCQUFjQyxNQUFkLEVBQXNCQyxXQUF0QixFQUFtQ0MsY0FBbkMsRUFBbURDLGVBQW5ELEVBQ0VDLGVBREYsRUFDbUJDLGNBRG5CLEVBQ21DQyxlQURuQyxFQUNvREMsZUFEcEQsRUFFRUMscUJBQXFCLElBRnZCLEVBRTZCQyxzQkFBc0Is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UTZCLE9BQVIsSUFBbUJSLFFBQW5CLElBQStCRixRQUEvQixHQUNFbkIsUUFBUTZCLE9BQVIsQ0FBZ0JKLEtBQWhCLENBQXNCQyxHQUF0QixDQUEwQixDQUFDTCxXQUFXRixRQUFaLElBQXdCLENBQWxELENBREYsR0FFRSxFQUZGOztBQUlBbkIsWUFBUTZCLE9BQVIsSUFBbUJOLFlBQW5CLEdBQ0V2QixRQUFRNkIsT0FBUixDQUFnQkYsS0FBaEIsQ0FBc0JELEdBQXRCLENBQTBCSCxZQUExQixDQURGLEdBRUUsRUFGRjtBQUdEO0FBbEZrQixDQUFyQjs7UUFzRkV6QyxjLEdBQUFBLGM7a0JBR2FBLGMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBTUElOQUxfUkVMQVRJT05fTFNUX1BUUl9UWVBFLFxuICBTcGluYWxHcmFwaFNlcnZpY2Vcbn0gZnJvbSBcInNwaW5hbC1lbnYtdmlld2VyLWdyYXBoLXNlcnZpY2VcIjtcbmltcG9ydCBIZWF0TWFwIGZyb20gXCIuL2hlYXRNYXBNb2RlbFwiO1xuXG5jb25zdCBSRUxBVElPTl9OQU1FID0gXCJoYXNIZWF0TWFwXCI7XG5cbmxldCBoZWF0bWFwU2VydmljZSA9IHtcbiAgY3JlYXRlSGVhdE1hcChub2RlSWQsIGhlYXRNYXBOYW1lLCBoZWF0TWFwTWluTmFtZSwgaGVhdE1hcE1pblZhbHVlLFxuICAgIGhlYXRNYXBNaW5Db2xvciwgaGVhdE1hcE1heE5hbWUsIGhlYXRNYXBNYXhWYWx1ZSwgaGVhdE1hcE1heENvbG9yLFxuICAgIGhlYXRNYXBBdmVyYWdlTmFtZSA9IG51bGwsIGhlYXRNYXBBdmVyYWdlVmFsdWUgPSBudWxsLFxuICAgIGhlYXRNYXBBdmVyYWdlQ29sb3IgPSBudWxsKSB7XG5cbiAgICB0aGlzLmdldEhlYXRNYXAobm9kZUlkLCBoZWF0TWFwTmFtZSkudGhlbihoZWF0TWFwRm91bmQgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJoZWF0TWFwRm91bmQgYmVmb3JlIGNvbmRpdGlvblwiLCBoZWF0TWFwRm91bmQpO1xuXG4gICAgICBpZiAodHlwZW9mIGhlYXRNYXBGb3VuZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBjb25zb2xlLmxvZyhcImhlYXRNYXBGb3VuZCBpbnNpZGUgaWYgY29uZGl0aW9uXCIsIGhlYXRNYXBGb3VuZCk7XG5cbiAgICAgICAgbGV0IGhlYXRNYXAgPSBuZXcgSGVhdE1hcChoZWF0TWFwTmFtZSwgaGVhdE1hcE1pbk5hbWUsXG4gICAgICAgICAgaGVhdE1hcE1pblZhbHVlLFxuICAgICAgICAgIGhlYXRNYXBNaW5Db2xvciwgaGVhdE1hcE1heE5hbWUsIGhlYXRNYXBNYXhWYWx1ZSxcbiAgICAgICAgICBoZWF0TWFwTWF4Q29sb3IsXG4gICAgICAgICAgaGVhdE1hcEF2ZXJhZ2VOYW1lLCBoZWF0TWFwQXZlcmFnZVZhbHVlLCBoZWF0TWFwQXZlcmFnZUNvbG9yKTtcblxuICAgICAgICBsZXQgaGVhdE1hcE5vZGUgPSBTcGluYWxHcmFwaFNlcnZpY2UuY3JlYXRlTm9kZSh7XG4gICAgICAgICAgbmFtZTogaGVhdE1hcE5hbWVcbiAgICAgICAgfSwgaGVhdE1hcCk7XG5cbiAgICAgICAgU3BpbmFsR3JhcGhTZXJ2aWNlLmFkZENoaWxkKFxuICAgICAgICAgIG5vZGVJZCxcbiAgICAgICAgICBoZWF0TWFwTm9kZSxcbiAgICAgICAgICBSRUxBVElPTl9OQU1FLFxuICAgICAgICAgIFNQSU5BTF9SRUxBVElPTl9MU1RfUFRSX1RZUEVcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhlYXRNYXBGb3VuZC5lbGVtZW50LmxvYWQoKS50aGVuKGVsID0+IHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUhlYXRNYXAoZWwsIGhlYXRNYXBNaW5WYWx1ZSxcbiAgICAgICAgICAgIGhlYXRNYXBNaW5Db2xvcixcbiAgICAgICAgICAgIGhlYXRNYXBNYXhWYWx1ZSwgaGVhdE1hcE1heENvbG9yLCBoZWF0TWFwQXZlcmFnZUNvbG9yKTtcbiAgICAgICAgfSlcblxuICAgICAgfVxuICAgIH0pXG5cblxuXG4gIH0sXG4gIGdldEhlYXRNYXAoZGFzaGJvYXJkSWQsIGhlYXRNYXBOYW1lKSB7XG4gICAgcmV0dXJuIFNwaW5hbEdyYXBoU2VydmljZS5nZXRDaGlsZHJlbihkYXNoYm9hcmRJZCwgW1JFTEFUSU9OX05BTUVdKS50aGVuKFxuICAgICAgaGVhdE1hcHMgPT4ge1xuICAgICAgICBpZiAoaGVhdE1hcE5hbWUpIHtcbiAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgaGVhdE1hcHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCBoZWF0TWFwID0gaGVhdE1hcHNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKGhlYXRNYXAubmFtZS5nZXQoKS50b0xvd2VyQ2FzZSgpID09PSBoZWF0TWFwTmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAgICAgICByZXR1cm4gaGVhdE1hcDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGhlYXRNYXBzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICk7XG4gIH0sXG4gIHVwZGF0ZUhlYXRNYXAoaGVhdE1hcCwgbWluVmFsdWUsIG1pbkNvbG9yLCBtYXhWYWx1ZSwgbWF4Q29sb3IsIGF2ZXJhZ2VDb2xvcikge1xuICAgIG1pblZhbHVlICYmIG1pblZhbHVlICE9PSBoZWF0TWFwLm1pbi52YWx1ZS5nZXQoKSA/XG4gICAgICBoZWF0TWFwLm1pbi52YWx1ZS5zZXQobWluVmFsdWUpIDpcbiAgICAgIFwiXCI7XG5cbiAgICBtaW5Db2xvciAmJiBtaW5Db2xvciAhPT0gaGVhdE1hcC5taW4uY29sb3IuZ2V0KCkgP1xuICAgICAgaGVhdE1hcC5taW4uY29sb3Iuc2V0KG1pbkNvbG9yKSA6XG4gICAgICBcIlwiO1xuXG4gICAgbWF4VmFsdWUgJiYgbWF4VmFsdWUgIT09IGhlYXRNYXAubWF4LnZhbHVlLmdldCgpID9cbiAgICAgIGhlYXRNYXAubWF4LnZhbHVlLnNldChtYXhWYWx1ZSkgOlxuICAgICAgXCJcIjtcblxuICAgIG1heENvbG9yICYmIG1heENvbG9yICE9PSBoZWF0TWFwLm1heC5jb2xvci5nZXQoKSA/XG4gICAgICBoZWF0TWFwLm1heC5jb2xvci5zZXQobWF4Q29sb3IpIDpcbiAgICAgIFwiXCI7XG5cbiAgICBoZWF0TWFwLmF2ZXJhZ2UgJiYgbWF4VmFsdWUgJiYgbWluVmFsdWUgP1xuICAgICAgaGVhdE1hcC5hdmVyYWdlLnZhbHVlLnNldCgobWF4VmFsdWUgKyBtaW5WYWx1ZSkgLyAyKSA6XG4gICAgICBcIlwiO1xuXG4gICAgaGVhdE1hcC5hdmVyYWdlICYmIGF2ZXJhZ2VDb2xvciA/XG4gICAgICBoZWF0TWFwLmF2ZXJhZ2UuY29sb3Iuc2V0KGF2ZXJhZ2VDb2xvcikgOlxuICAgICAgXCJcIjtcbiAgfVxufTtcblxuZXhwb3J0IHtcbiAgaGVhdG1hcFNlcnZpY2Vcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhlYXRtYXBTZXJ2aWNlOyJdfQ==